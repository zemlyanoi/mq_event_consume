//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.7 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2019.04.01 at 02:40:24 PM PDT 
//


package com.poc.demo.pojo;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for dataTypeEnumType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="dataTypeEnumType">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="smallint"/>
 *     &lt;enumeration value="integer"/>
 *     &lt;enumeration value="bigint"/>
 *     &lt;enumeration value="float"/>
 *     &lt;enumeration value="real"/>
 *     &lt;enumeration value="double"/>
 *     &lt;enumeration value="decimal"/>
 *     &lt;enumeration value="decfloat"/>
 *     &lt;enumeration value="char"/>
 *     &lt;enumeration value="varchar"/>
 *     &lt;enumeration value="longvarchar"/>
 *     &lt;enumeration value="bitchar"/>
 *     &lt;enumeration value="bitvarchar"/>
 *     &lt;enumeration value="bitlongvarchar"/>
 *     &lt;enumeration value="graphic"/>
 *     &lt;enumeration value="vargraphic"/>
 *     &lt;enumeration value="longvargraphic"/>
 *     &lt;enumeration value="time"/>
 *     &lt;enumeration value="timestamp"/>
 *     &lt;enumeration value="date"/>
 *     &lt;enumeration value="rowid"/>
 *     &lt;enumeration value="blob"/>
 *     &lt;enumeration value="clob"/>
 *     &lt;enumeration value="dbclob"/>
 *     &lt;enumeration value="xml"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "dataTypeEnumType")
@XmlEnum
public enum DataTypeEnumType {

    @XmlEnumValue("smallint")
    SMALLINT("smallint"),
    @XmlEnumValue("integer")
    INTEGER("integer"),
    @XmlEnumValue("bigint")
    BIGINT("bigint"),
    @XmlEnumValue("float")
    FLOAT("float"),
    @XmlEnumValue("real")
    REAL("real"),
    @XmlEnumValue("double")
    DOUBLE("double"),
    @XmlEnumValue("decimal")
    DECIMAL("decimal"),
    @XmlEnumValue("decfloat")
    DECFLOAT("decfloat"),
    @XmlEnumValue("char")
    CHAR("char"),
    @XmlEnumValue("varchar")
    VARCHAR("varchar"),
    @XmlEnumValue("longvarchar")
    LONGVARCHAR("longvarchar"),
    @XmlEnumValue("bitchar")
    BITCHAR("bitchar"),
    @XmlEnumValue("bitvarchar")
    BITVARCHAR("bitvarchar"),
    @XmlEnumValue("bitlongvarchar")
    BITLONGVARCHAR("bitlongvarchar"),
    @XmlEnumValue("graphic")
    GRAPHIC("graphic"),
    @XmlEnumValue("vargraphic")
    VARGRAPHIC("vargraphic"),
    @XmlEnumValue("longvargraphic")
    LONGVARGRAPHIC("longvargraphic"),
    @XmlEnumValue("time")
    TIME("time"),
    @XmlEnumValue("timestamp")
    TIMESTAMP("timestamp"),
    @XmlEnumValue("date")
    DATE("date"),
    @XmlEnumValue("rowid")
    ROWID("rowid"),
    @XmlEnumValue("blob")
    BLOB("blob"),
    @XmlEnumValue("clob")
    CLOB("clob"),
    @XmlEnumValue("dbclob")
    DBCLOB("dbclob"),
    @XmlEnumValue("xml")
    XML("xml");
    private final String value;

    DataTypeEnumType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static DataTypeEnumType fromValue(String v) {
        for (DataTypeEnumType c: DataTypeEnumType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
